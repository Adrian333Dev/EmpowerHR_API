generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  org_id      Int          @id @default(autoincrement())
  name        String       @db.VarChar(100)
  description String?      @db.Text
  departments Department[]
  employees   Employee[]

  @@map(name: "organizations")
}

model Department {
  department_id        Int          @id @default(autoincrement())
  name                 String       @db.VarChar(100)
  org_id               Int
  parent_department_id Int?
  manager_id           Int?
  organization         Organization @relation(fields: [org_id], references: [org_id])
  parent_department    Department?  @relation("parent_department", fields: [parent_department_id], references: [department_id], onDelete: Restrict)
  manager              Employee?    @relation("manager", fields: [manager_id], references: [employee_id], onDelete: Restrict)
  employees            Employee[]
  child_departments    Department[] @relation("parent_department")

  @@map(name: "departments")
}

model User {
  user_id       Int       @id @default(autoincrement())
  first_name    String    @db.VarChar(50)
  last_name     String    @db.VarChar(50)
  email         String    @unique @db.VarChar(100)
  password_hash String    @db.VarChar(255)
  employee      Employee?
}

model Role {
  role_id         Int        @id @default(autoincrement())
  name       String     @db.VarChar(100)
  permission String     @db.Text
  employees  Employee[]

  @@map(name: "roles")
}

model JobTitle {
  job_id        Int        @id @default(autoincrement())
  title     String     @db.VarChar(100)
  employees Employee[]
}

model Employee {
  employee_id                     Int                 @unique
  user                            User                @relation(fields: [employee_id], references: [user_id])
  role_id                         Int
  role                            Role                @relation(fields: [role_id], references: [role_id])
  department_id                   Int
  org_id                 Int
  job_title_id                    Int
  department                      Department          @relation(fields: [department_id], references: [department_id])
  organization                    Organization        @relation(fields: [org_id], references: [org_id])
  performance_goals               PerformanceGoal[]
  performance_reviews_as_employee PerformanceReview[] @relation("performance_reviews_as_employee")
  performance_reviews_as_reviewer PerformanceReview[] @relation("performance_reviews_as_reviewer")
  attendance_records              AttendanceRecord[]
  managed_departments             Department[]        @relation("manager")
  job_title                       JobTitle            @relation(fields: [job_title_id], references: [job_id])

  @@index([employee_id], name: "employee_id_index")
  @@map(name: "employees")
}

enum GoalStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
}

model PerformanceGoal {
  id          Int        @id @default(autoincrement())
  employee_id Int
  title       String     @db.VarChar(100)
  description String?    @db.Text
  deadline    DateTime
  status      GoalStatus
  employee    Employee   @relation(fields: [employee_id], references: [employee_id])

  @@map(name: "performance_goals")
}

model PerformanceReview {
  id          Int      @id @default(autoincrement())
  employee_id Int
  reviewer_id Int
  date        DateTime
  rating      Float
  comments    String?
  employee    Employee @relation("performance_reviews_as_employee", fields: [employee_id], references: [employee_id])
  reviewer    Employee @relation("performance_reviews_as_reviewer", fields: [reviewer_id], references: [employee_id])

  @@map(name: "performance_reviews")
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

model AttendanceRecord {
  id             Int              @id @default(autoincrement())
  employee_id    Int
  check_in_time  DateTime
  check_out_time DateTime?
  status         AttendanceStatus
  employee       Employee         @relation(fields: [employee_id], references: [employee_id])

  @@map(name: "attendance_records")
}
